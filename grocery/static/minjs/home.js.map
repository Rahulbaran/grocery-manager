{"version":3,"sources":["home.js"],"names":["loadingSpinner","document","querySelector","spinnerContainer","tableBody","totalAmount","firstOrder","counter","loadOrders","entries","isIntersecting","httpReq","async","url","response","fetch","mode","method","cache","status","json","Error","then","res","length","removeChild","firstElementChild","noMorePara","createElement","setAttribute","textContent","append","observer","unobserve","loadOrder","lastIndex","orderHtml","cloneNode","orderData","children","appendChild","earlierTotal","Number","catch","console","error","IntersectionObserver","observe"],"mappings":"AAAA,aAKA,MAAMA,eAAiBC,SAASC,cAAc,qBACxCC,iBAAmBF,SAASC,cAAc,gCAC1CE,UAAYH,SAASC,cAAc,uBACnCG,YAAcJ,SAASC,cAAc,iBACrCI,WAAaL,SAASC,cAAc,sCAC1C,IAAIK,QAAU,GAGd,MAAMC,WAAaC,IACf,GAAIA,EAAQ,GAAGC,eAAgB,CAE3B,MAAMC,EAAUC,MAAAA,IACZ,MAAMC,EAAM,iBAAiBN,IAOvBO,QAAiBC,MAAMF,EANhB,CACTG,KAAM,cACNC,OAAQ,MACRC,MAAO,aAKX,GAAwB,MAApBJ,EAASK,OACT,aAAaL,EAASM,OAEtB,MAAMC,MAAM,sCAGpBV,EAAQJ,SACHe,MAAKC,IACF,IAAKA,EAAY,OAAEC,OAAQ,CACvBrB,iBAAiBsB,YACbtB,iBAAiBuB,mBAErB,MAAMC,EAAa1B,SAAS2B,cAAc,KAM1C,OALAD,EAAWE,aAAa,QAAS,eACjCF,EAAWG,YAAc,iBACzB3B,iBAAiB4B,OAAOJ,QAExBK,SAASC,UAAUjC,gBAIvB,IAAK,IAAIkC,KAAaX,EAAY,OAAG,CAEjC,MAAMY,EAAYlC,SAASC,cACvB,oDACF4B,YAEIM,EAAY9B,WAAW+B,WAAU,GACjCC,EAAYF,EAAUG,SAE5BD,EAAU,GAAGR,aAAeK,EAAY,EACxCG,EAAU,GAAGR,YAAcI,EAAoB,SAC/CI,EAAU,GAAGR,YAAcI,EAAgB,KAC3CI,EAAU,GAAGR,YAAcI,EAAiB,MAE5C9B,UAAUoC,YAAYJ,GAE1B7B,SAAW,GACX,MAAMkC,EAAeC,OAAOrC,YAAYyB,aACxCzB,YAAYyB,YAAc,GAAGP,EAAgB,WAAIkB,OAEpDE,MAAMC,QAAQC,SAKrBb,SAAW,IAAIc,qBAAqBtC,YAC1CwB,SAASe,QAAQ/C","file":"home.js","sourcesContent":["\"use strict\";\n\n/* *******************************\n * Functionality related with infinite scrolling\n * ***************************** */\nconst loadingSpinner = document.querySelector(\".loading__spinner\");\nconst spinnerContainer = document.querySelector(\".loading__spinner__container\");\nconst tableBody = document.querySelector(\".order__table tbody\");\nconst totalAmount = document.querySelector(\"tfoot td span\");\nconst firstOrder = document.querySelector(\".order__table tbody tr:first-child\");\nlet counter = 20;\n\n//function to load products by making http request\nconst loadOrders = entries => {\n    if (entries[0].isIntersecting) {\n        //making http request to recive the furthur orders\n        const httpReq = async counter => {\n            const url = `/loadOrders?c=${counter}`;\n            const init = {\n                mode: \"same-origin\",\n                method: \"get\",\n                cache: \"no-cache\",\n            };\n\n            const response = await fetch(url, init);\n\n            if (response.status === 200) {\n                return await response.json();\n            } else {\n                throw Error(\"Did not get the expected response\");\n            }\n        };\n        httpReq(counter)\n            .then(res => {\n                if (!res[\"orders\"].length) {\n                    spinnerContainer.removeChild(\n                        spinnerContainer.firstElementChild\n                    );\n                    const noMorePara = document.createElement(\"p\");\n                    noMorePara.setAttribute(\"class\", \"noMoreOrder\");\n                    noMorePara.textContent = \"No more Orders\";\n                    spinnerContainer.append(noMorePara);\n\n                    observer.unobserve(loadingSpinner);\n                    return;\n                }\n\n                for (let loadOrder of res[\"orders\"]) {\n                    //last order index\n                    const lastIndex = document.querySelector(\n                        \".order__table tbody tr:last-child td:first-child\"\n                    ).textContent;\n\n                    const orderHtml = firstOrder.cloneNode(true);\n                    const orderData = orderHtml.children;\n\n                    orderData[0].textContent = +lastIndex + 1;\n                    orderData[1].textContent = loadOrder[\"customer\"];\n                    orderData[2].textContent = loadOrder[\"date\"];\n                    orderData[3].textContent = loadOrder[\"total\"];\n\n                    tableBody.appendChild(orderHtml);\n                }\n                counter += 20;\n                const earlierTotal = Number(totalAmount.textContent);\n                totalAmount.textContent = `${res[\"totalPrice\"] + earlierTotal}`;\n            })\n            .catch(console.error);\n    }\n};\n\n//Intersection Observer to observer intersection of spinner with viewport\nconst observer = new IntersectionObserver(loadOrders);\nobserver.observe(loadingSpinner);\n"]}