{"version":3,"sources":["updateProfile.js"],"names":["dropArea","document","querySelector","avatarForm","fileField","getElementById","errorMsg","forEach","event","addEventListener","e","preventDefault","classList","add","remove","uploadAvatarFunc","pics","fileTypes","length","size","includes","type","formData","FormData","append","async","init","method","mode","cache","body","response","fetch","ok","status","json","textContent","httpReq","then","res","lastElementChild","matches","removeChild","img","createElement","src","catch","console","error","dataTransfer","files","this"],"mappings":"AAAA,aAKA,MAAMA,SAAWC,SAASC,cAAc,aAClCC,WAAaF,SAASC,cAAc,kBACpCE,UAAYH,SAASI,eAAe,gBACpCC,SAAWL,SAASC,cAAc,yBAKxC,CAAC,WAAW,YAAY,YAAY,QAAQK,SAAQC,IAChDR,SAASS,iBAAiBD,GAAOE,IAC7BA,EAAEC,uBAMV,CAAC,WAAW,aAAaJ,SAAQC,IAC7BR,SAASS,iBAAiBD,GAAO,KAC7BL,WAAWS,UAAUC,IAAI,mBAMjC,CAAC,YAAY,QAAQN,SAAQC,IACzBR,SAASS,iBAAiBD,GAAO,KAC7BL,WAAWS,UAAUE,OAAO,mBAQpC,MAAMC,iBAAoBC,IAEtB,MAAMC,EAAY,CAAC,aAAa,YAAY,YAAY,aACxD,GAAmB,IAAhBD,EAAKE,QAAgBF,EAAK,GAAGG,MAAQ,UAAsBF,EAAUG,SAASJ,EAAK,GAAGK,MAAO,CAG5F,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAASR,EAAK,IAGdS,WACZ,MAAMC,EAAO,CACTC,OAAS,OACTC,KAAO,cACPC,MAAQ,WACRC,KAAOR,GAELS,QAAiBC,MAAM,gBAAgBN,GAC7C,GAAGK,EAASE,IAA0B,MAApBF,EAASG,OACvB,aAAaH,EAASI,OAGtB7B,SAAS8B,YAAc,gCAK/BC,GACCC,MAAKC,IACEpC,WAAWqC,iBAAiBC,QAAQ,QACpCtC,WAAWuC,YAAYvC,WAAWqC,kBAEtC,MAAMG,EAAM1C,SAAS2C,cAAc,OACnCD,EAAIE,IAAM,yBAAyBN,EAAS,MAC5CpC,WAAWqB,OAAOmB,GAClBrC,SAAS8B,YAAc,MAE1BU,MAAMC,QAAQC,YAGXhC,EAAK,GAAGG,KAAO,SAAkBb,SAAS8B,YAAc,kCACvDnB,EAAUG,SAASJ,EAAK,GAAGK,MAC/Bf,SAAS8B,YAAc,qCADe9B,SAAS8B,YAAc,8CAStEpC,SAASS,iBAAiB,QAAQC,IAC9B,MACMM,EAAO,IADCN,EAAEuC,aAAaC,OAE7BnC,iBAAiBC,MAQrBZ,UAAUK,iBAAiB,UAAU,WACjCM,iBAAiB,IAAIoC,KAAKD","file":"updateProfile.js","sourcesContent":["'use strict'\n\n/***************************\n * Avatar uploading related functionality\n ***************************/\nconst dropArea = document.querySelector('.dropArea');\nconst avatarForm = document.querySelector('.dropArea form');\nconst fileField = document.getElementById('avatar--file');\nconst errorMsg = document.querySelector('.dropArea .error--msg');\n\n\n\n//Preventing default behaviour\n['dragover','dragenter','dragleave','drop'].forEach(event => {\n    dropArea.addEventListener(event, e => {\n        e.preventDefault();\n    });\n});\n\n\n//changing the border color when a file is dragged over or dragged enter\n['dragover','dragenter'].forEach(event => {\n    dropArea.addEventListener(event, () => {\n        avatarForm.classList.add('highlight');\n    });\n});\n\n\n//setting border color of form back to default when dragged leave or drop occurs\n['dragleave','drop'].forEach(event => {\n    dropArea.addEventListener(event, () => {\n        avatarForm.classList.remove('highlight');\n    });\n});\n\n\n\n\n//function to upload avatar\nconst uploadAvatarFunc = (pics) => {\n    \n    const fileTypes = ['image/jpeg','image/jpg','image/png','image/gif'];\n    if(pics.length === 1 && pics[0].size <= (16 * 1024 * 1024) && fileTypes.includes(pics[0].type)) {\n\n        //1. Storing file in formData Object\n        const formData = new FormData();\n        formData.append('avatar',pics[0]);\n\n        //2. Making http request using fetch api\n        const httpReq = async () => {\n            const init = {\n                method : 'post',\n                mode : 'same-origin',\n                cache : 'no-cache',\n                body : formData\n            };\n            const response = await fetch('/uploadAvatar',init);\n            if(response.ok && response.status === 200) {\n                return await response.json();\n            }\n            else {\n                errorMsg.textContent = 'â˜¹ Sorry something went wrong';\n            }\n        };\n\n        //3. Using the response received from server\n        httpReq()\n        .then(res => {\n            if (avatarForm.lastElementChild.matches('img')) {\n                avatarForm.removeChild(avatarForm.lastElementChild);\n            }\n            const img = document.createElement('img');\n            img.src = `../static/user-images/${res['pic']}`;\n            avatarForm.append(img);\n            errorMsg.textContent = '';   \n        })\n        .catch(console.error);\n    }\n\n    else if(pics[0].size > 16 * 1024 * 1024) errorMsg.textContent = 'file size is greater than 16 MB';\n    else if(!fileTypes.includes(pics[0].type)) errorMsg.textContent = 'file in jpg/png/gif format is only allowed';\n    else errorMsg.textContent = 'Only one file is allowed to upload';\n};\n\n\n\n\n\n//event handler for drop Event\ndropArea.addEventListener('drop', e => {\n    const files = e.dataTransfer.files;\n    const pics = [...files];\n    uploadAvatarFunc(pics);\n});\n\n\n\n\n\n//event handler for file field\nfileField.addEventListener('change', function() {\n    uploadAvatarFunc([...this.files]);\n});"]}