{"version":3,"sources":["updateProfile.js"],"names":["dropArea","document","querySelector","avatarForm","fileField","getElementById","uploadErrorMsg","forEach","event","addEventListener","e","preventDefault","classList","add","remove","updateMsg","msg","color","textContent","style","uploadAvatarFunc","pics","fileTypes","length","size","includes","type","formData","FormData","append","async","init","method","mode","cache","body","response","fetch","ok","status","json","httpReq","then","res","lastElementChild","matches","removeChild","img","createElement","src","catch","console","error","dataTransfer","files","this","generalForm","nameField","shopField","locationField","nameMsg","shopMsg","locationMsg","generalFormMsg","generalFormUpdateMsg","value","JSON","stringify","name","shop","location","req","Request","headers","httpRequest"],"mappings":"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","file":"updateProfile.js","sourcesContent":["'use strict'\n\n/***************************\n * Avatar uploading related functionality\n ***************************/\nconst dropArea = document.querySelector('.dropArea');\nconst avatarForm = document.querySelector('.dropArea form');\nconst fileField = document.getElementById('avatar--file');\nconst uploadErrorMsg = document.querySelector('.dropArea .upload__error__msg');\n\n\n\n//Preventing default behaviour\n['dragover','dragenter','dragleave','drop'].forEach(event => {\n    dropArea.addEventListener(event, e => {\n        e.preventDefault();\n    });\n});\n\n\n//Changing the border color when a file is dragged over/dragged enter\n['dragover','dragenter'].forEach(event => {\n    dropArea.addEventListener(event, () => {\n        avatarForm.classList.add('highlight');\n    });\n});\n\n\n//Setting border color of form back to default when dragged leave/drop occurs\n['dragleave','drop'].forEach(event => {\n    dropArea.addEventListener(event, () => {\n        avatarForm.classList.remove('highlight');\n    });\n});\n\n\n\n\n//Function to update message and font color of text after uploading picture\nconst updateMsg = (msg,color) => {\n    uploadErrorMsg.textContent = msg\n    uploadErrorMsg.style.color = color;\n};\n\n\n//Function to upload avatar\nconst uploadAvatarFunc = (pics) => {\n    \n    const fileTypes = ['image/jpeg','image/jpg','image/png','image/gif'];\n    if(pics.length === 1 && pics[0].size <= (16 * 1024 * 1024) && fileTypes.includes(pics[0].type)) {\n\n        //1. Storing file in formData Object\n        const formData = new FormData();\n        formData.append('avatar',pics[0]);\n\n        //2. Making http request using fetch api\n        const httpReq = async () => {\n            const init = {\n                method : 'post',\n                mode : 'same-origin',\n                cache : 'no-cache',\n                body : formData\n            };\n            const response = await fetch('/uploadAvatar',init);\n            if(response.ok && response.status === 200) {\n                return await response.json();\n            }\n            else {\n                uploadErrorMsg.textContent = 'â˜¹ Sorry something went wrong';\n            }\n        };\n\n        //3. Using the response received from server\n        httpReq()\n        .then(res => {\n            if (avatarForm.lastElementChild.matches('img')) {\n                avatarForm.removeChild(avatarForm.lastElementChild);\n            }\n            const img = document.createElement('img');\n            img.src = `../static/user-images/${res['pic']}`;\n            avatarForm.append(img);\n\n            updateMsg('Your profile pic has been updated','hsl(220,100%,55%)');\n        })\n        .catch(console.error);\n    }\n\n    else if(pics[0].size > 16 * 1024 * 1024) updateMsg('file size is greater than 16 MB','hsl(5, 100%, 50%)');\n    else if(!fileTypes.includes(pics[0].type)) updateMsg('file in jpg/png/gif format is only allowed','hsl(5, 100%, 50%)');\n    else updateMsg('Only one file is allowed to upload','hsl(5, 100%, 50%)');\n};\n\n\n\n//Event handler for drop Event\ndropArea.addEventListener('drop', e => {\n    const files = e.dataTransfer.files;\n    const pics = [...files];\n    uploadAvatarFunc(pics);\n});\n\n\n\n//Event handler for file field\nfileField.addEventListener('change', function() {\n    uploadAvatarFunc([...this.files]);\n});\n\n\n\n\n\n\n/****************************\n * General info updation related functionality\n ****************************/\nconst generalForm = document.querySelector('.general--details--form');\nconst nameField = document.querySelector('.name__Field');\nconst shopField = document.querySelector('.shopname__Field');\nconst locationField = document.querySelector('.location__Field');\nconst nameMsg = document.querySelector('.name__error__msg');\nconst shopMsg = document.querySelector('.shopname__error__msg');\nconst locationMsg = document.querySelector('.location__error__msg');\nconst generalFormMsg = document.querySelector('.general__form__error__msg');\n\n\n\nconst generalFormUpdateMsg = (msg,color) => {\n    generalFormMsg.textContent = msg;\n    generalFormMsg.style.color = color;\n};\n\n\n//event handler for submitting the form\ngeneralForm.addEventListener('submit', e => {\n    //1. Preventing default behaviour \n    e.preventDefault();\n\n    //2. Checking if name field is empty and has more than 100 characters\n    if (nameField.value.length < 5 || nameField.value.length > 100) {\n        nameMsg.textContent = 'name should contain 5 to 100 characters';\n        return;\n    } \n\n    //3. Checking if shopname field contains more than 200 characters\n    if (shopField.value.length >  200) {\n        shopMsg.textContent = 'shopname should contain upto 200 characters';\n        return;\n    }\n\n    //4. Checking if location field contains more than 100 characters\n    if (locationField.value.length > 100) {\n        locationMsg.textContent = 'location should contain upto 100 characters';\n        return;\n    }\n\n    //5. Making http request to update the general Information\n    const httpRequest = async () => {\n        const body = JSON.stringify({\n            name : nameField.value,\n            shop : shopField.value,\n            location : locationField.value\n        });\n\n        const init = {\n            mode : 'same-origin',\n            method : 'post',\n            body : body,\n            headers : { 'Content-Type' : 'application/json'},\n            cache : 'no-cache'\n        };\n\n        const req = new Request('/updateGeneralInfo',init);\n        const response = await fetch(req);\n\n        if(response.status === 200) {\n            return response.json();\n        } else {\n            generalFormUpdateMsg('Your details has not updated','hsl(5, 100%, 50%)');\n        }\n    };\n    httpRequest()\n    .then(() => generalFormUpdateMsg('Your details has been updated','hsl(220,100%,55%)'))\n    .catch(() => generalFormUpdateMsg('Sorry something went wrong','hsl(5,100%,50%)'));\n});"]}