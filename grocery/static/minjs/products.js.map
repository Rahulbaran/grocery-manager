{"version":3,"sources":["products.js"],"names":["newProductsForm","document","querySelector","newProductBtn","addProductBtn","productsTable","addEventListener","insertAdjacentHTML","e","target","parentNode","className","localName","this","removeChild","preventDefault","children","products","i","length","grandChildren","product","Array","j","input","push","value","totalChildren","prod","firstChild","init","mode","method","headers","body","JSON","stringify","fetch","then","res","status","json","newProducts","tableBody","forEach","lastIndex","newProduct","console","error","catch","classList","contains","productId","id","split","cache","totalProducts","allProducts","firstElementChild","textContent"],"mappings":"AAAA,MAAMA,gBAAkBC,SAASC,cAAc,wBACzCC,cAAgBF,SAASC,cAAc,sBACvCE,cAAgBH,SAASC,cAAc,sBACvCG,cAAgBJ,SAASC,cAAc,oBAO7CC,cAAcG,iBAAiB,SAAS,KAEpCN,gBAAgBO,mBAAmB,aADX,+cAS5BP,gBAAgBM,iBAAiB,SAAS,SAAUE,GACE,iBAAlCA,EAAEC,OAAOC,WAAWC,WAAuD,WAAvBH,EAAEC,OAAOG,WAClEC,KAAKC,YAAYN,EAAEC,OAAOC,eAQzCV,gBAAgBM,iBAAiB,UAAU,SAAUE,GAGjDA,EAAEO,iBAIF,MAAMC,EAAWR,EAAEC,OAAOO,SACpBC,EAAW,GAEjB,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAASG,OAAS,EAAGD,IAAK,CACzC,MAAME,EAAgBJ,EAASE,GAAGF,SAC5BK,EAAU,IAAIC,MAEpB,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAAcD,OAAS,EAAGI,IAAK,CAC9C,MAAMC,EAAQJ,EAAcG,GAAGP,SAAS,GACxCK,EAAQI,KAAKD,EAAME,OACnBF,EAAME,MAAQ,GAElBT,EAASQ,KAAKJ,GAKlB,MAAMM,EAAgBX,EAASG,OAAS,EACxC,IAAI,IAAIS,EAAO,EAAGA,EAAOD,EAAeC,IACpCf,KAAKC,YAAYD,KAAKgB,YAK1B,MACMC,EAAO,CACTC,KAAO,cACPC,OAAS,OACTC,QAAU,CAAE,eAAiB,oBAC7BC,KAAOC,KAAKC,UAAU,CAACnB,SAAaA,KAGxCoB,MARY,eAQDP,GACVQ,MAAKC,IACiB,MAAfA,EAAIC,OACJD,EAAIE,OACHH,MAAKC,IAEF,MAAMtB,EAAWsB,EAAIG,YACfC,EAAY1C,SAASC,cAAc,SAEzCe,EAAS2B,SAAQhB,IAEb,MAAMiB,EAAYF,EAAU3B,SAASG,OAC/B2B,EAAa,oBAAoBlB,EAAK,WAAWiB,EAAU,aAAajB,EAAK,cAAcA,EAAK,cAAcA,EAAK,gFAEzHe,EAAUpC,mBAAmB,YAAYuC,SAIhDC,QAAQC,MAAM,6BAEtBC,OAAM,IAAMF,QAAQC,MAAM,8DAS/B3C,cAAcC,iBAAiB,SAAS,SAAUE,GAI9C,GAFkBA,EAAEC,OAAOyC,UAAUC,SAAS,wBAEhC,CACV,MAAM9B,EAAUb,EAAEC,OAAOC,WAAWA,WAG9B0C,EAAY/B,EAAQgC,GAAGC,MAAM,MAAM,GAInCxB,EAAO,CACTC,KAAO,cACPC,OAAS,OACTC,QAAU,CACN,eAAiB,oBAErBsB,MAAQ,UACRrB,KAAOC,KAAKC,UAAU,CAACiB,IAAMD,KAGjCf,MAAM,iBAAkBP,GACvBQ,MAAKC,IACiB,MAAfA,EAAIC,QAIJO,QAAQC,MAAMT,MAGrBU,MAAMF,QAAQC,OAIfnC,KAAKG,SAAS,GAAGF,YAAYO,GAI7B,MAAMmC,EAAgB3C,KAAKG,SAAS,GAAGA,SAASG,OAC1CsC,EAAc5C,KAAKG,SAAS,GAAGA,SAErC,IAAI,IAAIE,EAAE,EAAEA,GAAKsC,EAActC,IAC3BuC,EAAYvC,EAAE,GAAGwC,kBAAkBC,YAAczC","file":"products.js","sourcesContent":["const newProductsForm = document.querySelector('.new__products__form');\nconst newProductBtn = document.querySelector('.new__product__btn');\nconst addProductBtn = document.querySelector('.add__product__btn');\nconst productsTable = document.querySelector('.products__table');\n\n\n\n\n\n//event handler to add new Product Form\nnewProductBtn.addEventListener('click', () => {\n    const newProductInput = `<div class=\"new__product\"><label><span>Product Name</span><input type=\"text\" class=\"product__name\" required placeholder=\"product name\"></label><label><span>Unit</span><input type=\"text\" class=\"product__unit\" required placeholder=\"product unit\"></label><label><span>Price (In Rs.)</span><input type=\"number\" class=\"product__price\" required placeholder=\"product price\"></label><button type=\"button\" class=\"new__product__remove__btn btn\">Remove</button></div>`;\n    newProductsForm.insertAdjacentHTML('afterbegin', newProductInput);\n});\n\n\n\n\n\n//event handler to remove a product form\nnewProductsForm.addEventListener('click', function (e) {\n    const parent = (e.target.parentNode.className === \"new__product\" && e.target.localName === \"button\");\n    if(parent) this.removeChild(e.target.parentNode);\n});\n\n\n\n\n\n//event handler to make a http request for sending new products data\nnewProductsForm.addEventListener('submit', function (e) {\n\n    //1. prevent default submit behaviour\n    e.preventDefault();\n\n    \n    //2. Pushing product data in products array\n    const children = e.target.children;\n    const products = [];\n    \n    for(let i = 0; i < children.length - 1; i++) {\n        const grandChildren = children[i].children;\n        const product = new Array();\n\n        for(let j = 0; j < grandChildren.length - 1; j++) {\n            const input = grandChildren[j].children[1];\n            product.push(input.value);\n            input.value = '';\n        }\n        products.push(product);\n    }\n\n    \n    //3. Removing product input fields\n    const totalChildren = children.length - 2;\n    for(let prod = 0; prod < totalChildren; prod++) {\n        this.removeChild(this.firstChild);\n    }\n    \n    \n    //4. post request to send products data\n    const url = '/getProducts';\n    const init = {\n        mode : 'same-origin',\n        method : 'POST',\n        headers : { 'Content-Type' : 'application/json' },\n        body : JSON.stringify({'products' : products})\n    };\n    \n    fetch(url, init)\n    .then(res => {\n        if (res.status === 200) {\n            res.json()\n            .then(res => {\n\n                const products = res.newProducts;\n                const tableBody = document.querySelector('tbody');\n\n                products.forEach(prod => {\n\n                    const lastIndex = tableBody.children.length;\n                    const newProduct = `<tr id=\"product--${prod[0]}\"><td>${lastIndex+1}</td><td>${prod[1]}</td><td>${prod[2]}</td><td>${prod[3]}</td><td><button class=\"product__remove__btn btn\">Remove</button></td></tr>`;\n\n                    tableBody.insertAdjacentHTML('beforeend',newProduct);\n                });\n            });\n        }\n        else console.error('Did not get the result')\n    })\n    .catch(() => console.error('Something went wrong while getting making the request'));\n\n});\n\n\n\n\n\n//event handler to remove product(s) from the product list\nproductsTable.addEventListener('click', function (e) {\n    \n    const removeBtn = e.target.classList.contains('product__remove__btn');\n\n    if(removeBtn) {\n        const product = e.target.parentNode.parentNode\n\n        //1. get the product id\n        const productId = product.id.split('--')[1];\n       \n\n        //2. remove product from db\n        const init = {\n            mode : 'same-origin',\n            method : 'POST',\n            headers : {\n                'Content-Type' : 'application/json'\n            },\n            cache : 'default',\n            body : JSON.stringify({id : +productId})\n        };\n\n        fetch('/removeProduct', init)\n        .then(res => {\n            if (res.status === 200) {\n                return;\n            }\n            else {\n                console.error(res);\n            }\n        })\n        .catch(console.error);\n        \n\n        //3. remove product from ui\n        this.children[1].removeChild(product);\n\n\n        //4. update product indexes in ui\n        const totalProducts = this.children[1].children.length;\n        const allProducts = this.children[1].children;\n\n        for(let i=1;i <= totalProducts;i++){\n            allProducts[i-1].firstElementChild.textContent = i;\n        }\n    }\n})"]}