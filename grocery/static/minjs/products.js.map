{"version":3,"sources":["products.js"],"names":["newProductsForm","document","querySelector","newProductsContainer","newProductBtn","addProductBtn","productsTable","productsMainContainer","addEventListener","insertAdjacentHTML","e","target","parentNode","className","localName","this","removeChild","preventDefault","newProducts","children","products","i","length","grandChildren","product","Array","j","input","push","value","totalChildren","prod","firstChild","init","mode","method","headers","body","JSON","stringify","fetch","then","res","status","json","tableBody","forEach","lastIndex","newProduct","alreadyExistProducts","msg","console","error","catch","classList","contains","productId","id","split","cache","allProducts","firstElementChild","textContent"],"mappings":"AAAA,aAEA,MAAMA,gBAAkBC,SAASC,cAAc,wBACzCC,qBAAuBF,SAASC,cAClC,qCAEEE,cAAgBH,SAASC,cAAc,sBACvCG,cAAgBJ,SAASC,cAAc,sBACvCI,cAAgBL,SAASC,cAAc,oBACvCK,sBAAwBN,SAASC,cACnC,8BAMJE,cAAcI,iBAAiB,SAAS,KAEpCL,qBAAqBM,mBAAmB,aADhB,+nBAO5BN,qBAAqBK,iBAAiB,SAAS,SAAUE,GAEf,iBAAlCA,EAAEC,OAAOC,WAAWC,WACG,WAAvBH,EAAEC,OAAOG,WACDC,KAAKC,YAAYN,EAAEC,OAAOC,eAM1CZ,gBAAgBQ,iBAAiB,UAAU,SAAUE,GAEjDA,EAAEO,iBAGF,MAAMC,EAAcR,EAAEC,OAAOQ,SAAS,GAAGA,SACnCC,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IAAK,CACzC,MAAME,EAAgBL,EAAYG,GAAGF,SAC/BK,EAAU,IAAIC,MACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAcD,OAAS,EAAGI,IAAK,CAC/C,MAAMC,EAAQJ,EAAcG,GAAGP,SAAS,GACxCK,EAAQI,KAAKD,EAAME,OACnBF,EAAME,MAAQ,GAElBT,EAASQ,KAAKJ,GAIlB,MAAMM,EAAgBZ,EAAYI,OAAS,EAC3C,IAAK,IAAIS,EAAO,EAAGA,EAAOD,EAAeC,IACrC5B,qBAAqBa,YAAYb,qBAAqB6B,YAI1D,MACMC,EAAO,CACTC,KAAM,cACNC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEnB,SAAUA,KAGrCoB,MARY,eAQDP,GACNQ,MAAKC,IACiB,MAAfA,EAAIC,OACJD,EAAIE,OAAOH,MAAKC,IACZ,MAAMtB,EAAWsB,EAAIxB,YACf2B,EAAY5C,SAASC,cAAc,SAazC,GAXAkB,EAAS0B,SAAQf,IACb,MAAMgB,EAAYF,EAAU1B,SAASG,OAC/B0B,EAAa,oBAAoBjB,EAAK,WACxCgB,EAAY,aACJhB,EAAK,cAAcA,EAAK,cAChCA,EAAK,gFAETc,EAAUpC,mBAAmB,YAAauC,MAI1CN,EAAIO,qBAAsB,CAC1B,MAAMC,EAAM,wMAEZ3C,sBAAsBE,mBAClB,aACAyC,OAITC,QAAQC,MAAM,6BAExBC,OAAM,IACHF,QAAQC,MACJ,8DAQhB9C,cAAcE,iBAAiB,SAAS,SAAUE,GAG9C,GAFkBA,EAAEC,OAAO2C,UAAUC,SAAS,wBAE/B,CACX,MAAM/B,EAAUd,EAAEC,OAAOC,WAAWA,WAE9B4C,EAAYhC,EAAQiC,GAAGC,MAAM,MAAM,GAGnCzB,EAAO,CACTC,KAAM,cACNC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBuB,MAAO,UACPtB,KAAMC,KAAKC,UAAU,CAAEkB,IAAKD,KAGhChB,MAAM,iBAAkBP,GACnBQ,MAAKC,IACiB,MAAfA,EAAIC,QACHQ,QAAQC,MAAMV,MAEtBW,MAAMF,QAAQC,OAGnBrC,KAAKI,SAAS,GAAGH,YAAYQ,GAG7B,MAAMoC,EAAc7C,KAAKI,SAAS,GAAGA,SACrC,IAAK,IAAIE,EAAI,EAAGA,GAAKuC,EAAYtC,OAAQD,IACrCuC,EAAYvC,EAAI,GAAGwC,kBAAkBC,YAAczC,MAQ/Dd,sBAAsBC,iBAAiB,SAAS,SAAUE,GAClDA,EAAEC,OAAO2C,UAAUC,SAAS,mBAC5BxC,KAAKC,YAAYN,EAAEC,OAAOC","file":"products.js","sourcesContent":["\"use strict\";\n\nconst newProductsForm = document.querySelector(\".new__products__form\");\nconst newProductsContainer = document.querySelector(\n    \".new__products__fields__container\"\n);\nconst newProductBtn = document.querySelector(\".new__product__btn\");\nconst addProductBtn = document.querySelector(\".add__product__btn\");\nconst productsTable = document.querySelector(\".products__table\");\nconst productsMainContainer = document.querySelector(\n    \".products--main--container\"\n);\n\n/* ****************************\n * event handler to add new Product Form\n * ************************** */\nnewProductBtn.addEventListener(\"click\", () => {\n    const newProductInput = `<div class=\"new__product\"><label><span>Product Name</span><input type=\"text\" class=\"product__name\" required placeholder=\"product name\" title=\"product name should be maximum 200 characters long\"></label><label><span>Unit</span><input type=\"text\" class=\"product__unit\" required placeholder=\"product unit\" title=\"product unit should be maximum 20 characters long\"></label><label><span>Price (In Rs.)</span><input type=\"number\" class=\"product__price\" required placeholder=\"product price\" title=\"product price should be maximum 10 characters long\"></label><button type=\"button\" class=\"new__product__remove__btn btn\">Remove</button></div>`;\n    newProductsContainer.insertAdjacentHTML(\"afterbegin\", newProductInput);\n});\n\n/* ******************************\n * event handler to remove a product form\n * *************************** */\nnewProductsContainer.addEventListener(\"click\", function (e) {\n    const parent =\n        e.target.parentNode.className === \"new__product\" &&\n        e.target.localName === \"button\";\n    if (parent) this.removeChild(e.target.parentNode);\n});\n\n/* ******************************\n * event handler to make http request for sending new products data\n * *************************** */\nnewProductsForm.addEventListener(\"submit\", function (e) {\n    //1. prevent default submit behaviour\n    e.preventDefault();\n\n    //2. Pushing product data in products array\n    const newProducts = e.target.children[0].children;\n    const products = [];\n\n    for (let i = 0; i < newProducts.length; i++) {\n        const grandChildren = newProducts[i].children;\n        const product = new Array();\n        for (let j = 0; j < grandChildren.length - 1; j++) {\n            const input = grandChildren[j].children[1];\n            product.push(input.value);\n            input.value = \"\";\n        }\n        products.push(product);\n    }\n\n    //3. Removing product input fields\n    const totalChildren = newProducts.length - 1;\n    for (let prod = 0; prod < totalChildren; prod++) {\n        newProductsContainer.removeChild(newProductsContainer.firstChild);\n    }\n\n    //4. post request to send products data\n    const url = \"/getProducts\";\n    const init = {\n        mode: \"same-origin\",\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ products: products }),\n    };\n\n    fetch(url, init)\n        .then(res => {\n            if (res.status === 200) {\n                res.json().then(res => {\n                    const products = res.newProducts;\n                    const tableBody = document.querySelector(\"tbody\");\n\n                    products.forEach(prod => {\n                        const lastIndex = tableBody.children.length;\n                        const newProduct = `<tr id=\"product--${prod[0]}\"><td>${\n                            lastIndex + 1\n                        }</td><td>${prod[1]}</td><td>${prod[2]}</td><td>${\n                            prod[3]\n                        }</td><td><button class=\"product__remove__btn btn\">Remove</button></td></tr>`;\n                        tableBody.insertAdjacentHTML(\"beforeend\", newProduct);\n                    });\n\n                    //display message if some products which we were trying to add, are already in database\n                    if (res.alreadyExistProducts) {\n                        const msg = `<div class=\"msg__container info__msg__container\"><span>Some products are not added in list since they already exist</span>\n                    <button class=\"msg__hide__btn\">&Cross;</button></div>`;\n                        productsMainContainer.insertAdjacentHTML(\n                            \"afterbegin\",\n                            msg\n                        );\n                    }\n                });\n            } else console.error(\"Did not get the result\");\n        })\n        .catch(() =>\n            console.error(\n                \"Something went wrong while getting making the request\"\n            )\n        );\n});\n\n/* *****************************\n * event handler to remove product(s) from the product list\n * ************************** */\nproductsTable.addEventListener(\"click\", function (e) {\n    const removeBtn = e.target.classList.contains(\"product__remove__btn\");\n\n    if (removeBtn) {\n        const product = e.target.parentNode.parentNode;\n        //1. get the product id\n        const productId = product.id.split(\"--\")[1];\n\n        //2. remove product from db\n        const init = {\n            mode: \"same-origin\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            cache: \"default\",\n            body: JSON.stringify({ id: +productId }),\n        };\n\n        fetch(\"/removeProduct\", init)\n            .then(res => {\n                if (res.status === 200) return;\n                else console.error(res);\n            })\n            .catch(console.error);\n\n        //3. remove product from ui\n        this.children[1].removeChild(product);\n\n        //4. update product indexes in ui\n        const allProducts = this.children[1].children;\n        for (let i = 1; i <= allProducts.length; i++) {\n            allProducts[i - 1].firstElementChild.textContent = i;\n        }\n    }\n});\n\n/* ****************************\n * functionality to hide flashed message\n * ************************** */\nproductsMainContainer.addEventListener(\"click\", function (e) {\n    if (e.target.classList.contains(\"msg__hide__btn\")) {\n        this.removeChild(e.target.parentNode);\n    }\n});\n"]}