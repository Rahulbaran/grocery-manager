{"version":3,"sources":["orders.js"],"names":["newOrdersWrapper","document","querySelector","ordersForm","customerNameField","tableBody","addEventListener","e","target","parentNode","className","localName","this","removeChild","getProductName","prodInput","value","xhr","XMLHttpRequest","open","setRequestHeader","responseType","onload","unit","response","nextElementSibling","children","product","quantity","Number","onerror","console","error","send","JSON","stringify","name","calcTotalPrice","prodQuan","prodObj","status","prodPrice","statusText","preventDefault","allOrders","totalOrderFields","length","ordersData","i","fields","orderData","Array","j","push","ordersJSON","customer","orders","index","firstElementChild","async","init","mode","cache","method","body","headers","fetch","json","Error","httpReq","then","res","forEach","ord","lastIndex","orderHtml","insertAdjacentHTML","catch","classList","contains","order_id","id","split","text","http","log","textContent"],"mappings":"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","file":"orders.js","sourcesContent":["\"use strict\";\n\nconst newOrdersWrapper = document.querySelector(\n    \".new__orders__fields__container\"\n);\nconst ordersForm = document.querySelector(\".new__orders__form\");\nconst customerNameField = document.querySelector(\n    \".customer__name__field input\"\n);\nconst tableBody = document.querySelector(\"tbody\");\n\n/* *************************\n * event handler to remove newOrder fields\n * *********************** */\nnewOrdersWrapper.addEventListener(\"click\", function (e) {\n    const orderField =\n        e.target.parentNode.className === \"new__order__fields\" &&\n        e.target.localName === \"button\";\n    if (orderField) this.removeChild(e.target.parentNode);\n});\n\n/* ********************************\n *  Function to make http request for getting unit of the selected product (oninput event in html)\n * ****************************** */\nconst getProductName = function (prodInput) {\n    const value = prodInput.value;\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/getProductDetails\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.responseType = \"json\";\n    xhr.onload = function () {\n        const unit = xhr.response[\"unit\"];\n        if (unit) {\n            prodInput.parentNode.nextElementSibling.children[1].value = unit;\n\n            //updating the total price if product quantity exist\n            const product = prodInput.parentNode.parentNode;\n            const quantity = product.children[2].children[1].value;\n            if (quantity) {\n                let totalPrice = product.children[3].children[1];\n                totalPrice.value = Number(quantity) * xhr.response[\"price\"];\n            }\n        }\n    };\n\n    xhr.onerror = () => console.error(\"Internal Server Error\");\n    xhr.send(JSON.stringify({ name: value }));\n};\n\n/* *****************************\n * Function to make http request for calculating total price (oninput event in html)\n * ************************** */\nconst calcTotalPrice = prodInput => {\n    const prodQuan = Number(prodInput.value);\n    const prodName =\n        prodInput.parentNode.parentNode.children[0].children[1].value;\n    const prodObj = { name: prodName };\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"/getProductDetails\");\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.responseType = \"json\";\n    xhr.onload = () => {\n        if (xhr.status === 200) {\n            const prodPrice = xhr.response[\"price\"];\n            if (prodPrice)\n                prodInput.parentNode.nextElementSibling.children[1].value =\n                    prodPrice * prodQuan;\n        } else {\n            console.error(xhr.statusText);\n        }\n    };\n    xhr.onerror = () => console.error(\"Internal Server Error\");\n    xhr.send(JSON.stringify(prodObj));\n};\n\n/* ****************************\n * event handler for orders form submission\n * *************************** */\nordersForm.addEventListener(\"submit\", e => {\n    //1. Preventing form default submission behavior\n    e.preventDefault();\n\n    //2. storing order details in a suitable data structure and empting the input fields\n    const allOrders = newOrdersWrapper.children;\n    const totalOrderFields = allOrders.length;\n    const ordersData = [];\n\n    for (let i = 0; i < allOrders.length; i++) {\n        const fields = allOrders[i].children;\n        const orderData = new Array();\n\n        for (let j = 0; j < fields.length - 1; j++) {\n            orderData.push(fields[j].children[1].value);\n            if (j !== 0) fields[j].children[1].value = \"\";\n            else fields[j].children[1].value = \"Product name\";\n        }\n        ordersData.push(orderData);\n    }\n    const ordersJSON = JSON.stringify({\n        customer: customerNameField.value,\n        orders: ordersData,\n    });\n    customerNameField.value = \"\";\n\n    //3. Removing orders input fields\n    for (let index = 0; index < totalOrderFields - 1; index++) {\n        newOrdersWrapper.removeChild(newOrdersWrapper.firstElementChild);\n    }\n\n    //4. making http request to send and recieve json data\n    const httpReq = async () => {\n        const init = {\n            mode: \"same-origin\",\n            cache: \"no-cache\",\n            method: \"POST\",\n            body: ordersJSON,\n            headers: { \"Content-Type\": \"application/json\" },\n        };\n        const response = await fetch(\"/getOrders\", init);\n\n        if (response.status === 200) {\n            return response.json();\n        } else {\n            throw Error(\"Did not get the expected result\");\n        }\n    };\n    httpReq()\n        .then(res => {\n            const newOrders = res[\"orders\"];\n\n            newOrders.forEach(ord => {\n                const lastIndex = tableBody.children.length;\n\n                const orderHtml = `<tr id=\"order--${ord[0]}\"><td>${\n                    lastIndex + 1\n                }</td><td>${ord[1]}</td><td>${ord[2]}</td>\n            <td>${ord[3]} (${ord[4]})</td><td>${ord[5]}</td><td>${\n                    ord[6]\n                }</td><td><button class=\"order__remove__btn btn\">Remove</button></td></tr>`;\n                tableBody.insertAdjacentHTML(\"beforeend\", orderHtml);\n            });\n        })\n        .catch(console.error);\n});\n\n/* **************************\n * event handler to delete orders from ui and database\n * ************************ */\ntableBody.addEventListener(\"click\", function (e) {\n    const orderRemoveBtn = e.target.classList.contains(\"order__remove__btn\");\n\n    if (orderRemoveBtn) {\n        //1. Get order id\n        const order_id = e.target.parentNode.parentNode.id.split(\"--\")[1];\n\n        //2. http request to remove the order from database\n        const http = async () => {\n            const init = {\n                mode: \"same-origin\",\n                method: \"post\",\n                body: JSON.stringify({ id: +order_id }),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                cache: \"default\",\n            };\n            const response = await fetch(\"/removeOrder\", init);\n\n            if (response.status === 200) return response.text();\n            else throw Error(\"Did not get the expected result\");\n        };\n\n        http()\n            .then(res => console.log(res))\n            .catch(console.error);\n\n        //3. Remove the order from UI\n        this.removeChild(e.target.parentNode.parentNode);\n\n        //4. Update order indexes in UI\n        const allOrders = this.children;\n        for (let index = 0; index < allOrders.length; index++) {\n            allOrders[index].children[0].textContent = index + 1;\n        }\n    }\n});\n"]}