{"version":3,"sources":["orders.js"],"names":["newOrdersWrapper","document","querySelector","ordersForm","customerNameField","tableBody","addEventListener","e","target","parentNode","className","localName","this","removeChild","getProductName","prodInput","value","xhr","XMLHttpRequest","open","setRequestHeader","responseType","onload","unit","response","nextElementSibling","children","product","quantity","Number","onerror","console","error","send","JSON","stringify","name","calcTotalPrice","prodQuan","prodObj","status","prodPrice","statusText","preventDefault","allOrders","ordersData","i","length","fields","orderData","Array","j","push","ordersJSON","customer","orders","index","async","init","mode","cache","method","body","headers","fetch","json","Error","httpReq","then","res","forEach","ord","lastIndex","orderHtml","insertAdjacentHTML","catch","classList","contains","order_id","id","split","text","http","log","textContent"],"mappings":"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","file":"orders.js","sourcesContent":["'use strict'\n\nconst newOrdersWrapper = document.querySelector('.new__orders__fields__container');\nconst ordersForm = document.querySelector('.new__orders__form');\nconst customerNameField = document.querySelector('.customer__name__field input');\nconst tableBody = document.querySelector('tbody');\n\n\n\n\n\n// event handler to remove newOrder fields\nnewOrdersWrapper.addEventListener('click', function (e) {\n    const orderField = (e.target.parentNode.className === \"new__order__fields\" && e.target.localName === \"button\");\n    if (orderField) this.removeChild(e.target.parentNode);\n});\n\n\n\n\n\n\n\n// Function to make http request for getting unit of the selected product\nconst getProductName = function (prodInput) {\n    const value = prodInput.value;\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', '/getProductDetails');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.responseType = 'json';\n    xhr.onload = function () {\n        const unit = xhr.response['unit'];\n        if (unit){\n            prodInput.parentNode.nextElementSibling.children[1].value = unit;\n\n            //updating the total price if product quantity exist\n            const product = prodInput.parentNode.parentNode;\n            const quantity = product.children[2].children[1].value;\n            if(quantity) {\n                let totalPrice = product.children[3].children[1];\n                totalPrice.value = Number(quantity) * xhr.response['price'];\n            }\n        } \n    };\n\n    xhr.onerror = () => console.error('Internal Server Error');\n    xhr.send(JSON.stringify({name : value}));\n};\n\n\n\n\n\n\n\n//Function to make http request for calculating total price\nconst calcTotalPrice = (prodInput) => {\n\n    const prodQuan = Number(prodInput.value);\n    const prodName = prodInput.parentNode.parentNode.children[0].children[1].value;   \n    const prodObj = {'name' : prodName};\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST','/getProductDetails');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.responseType = 'json';\n    xhr.onload = () => {\n        if(xhr.status === 200) {\n            const prodPrice = xhr.response['price'];\n            if (prodPrice) prodInput.parentNode.nextElementSibling.children[1].value = prodPrice * prodQuan;\n        }\n        else {\n            console.error(xhr.statusText);\n        }\n    };\n    xhr.onerror = () => console.error('Internal Server Error');\n    xhr.send(JSON.stringify(prodObj));\n};\n\n\n\n\n\n\n//event handler for orders form submission\nordersForm.addEventListener('submit', e => {\n    //1. Preventing form default submission behavior\n    e.preventDefault();\n\n\n    //2. storing order details in a suitable data structure and empting the input fields\n    const allOrders = newOrdersWrapper.children;\n    const ordersData = [];\n\n    for(let i = 0;i < allOrders.length;i++){\n        const fields = allOrders[i].children;\n        const orderData = new Array();\n\n        for (let j = 0;j < fields.length - 1;j++) {\n            orderData.push(fields[j].children[1].value);\n            if (j !== 0) fields[j].children[1].value = '';\n            else fields[j].children[1].value = 'Product name';\n        }\n        ordersData.push(orderData);\n    }\n    const ordersJSON = JSON.stringify({\n        customer : customerNameField.value,\n        orders : ordersData\n    });\n    customerNameField.value = '';\n\n\n    //3. Removing orders input fields\n    for(let index = 0;index < allOrders.length - 1;index++) {\n        newOrdersWrapper.removeChild(allOrders[index]);\n    }\n    \n\n    //4. making http request to send and recieve json data\n    const httpReq = async () => {\n        const init = {\n            mode : 'same-origin',\n            cache : 'no-cache',\n            method : 'POST',\n            body : ordersJSON,\n            headers : {'Content-Type' : 'application/json'}\n        };\n        const response = await fetch('/getOrders', init);\n\n        if(response.status === 200) {\n            return response.json();\n        }\n        else {\n            throw Error('Did not get the expected result');\n        }\n    };\n    httpReq()\n    .then(res => {\n        const newOrders = res['orders'];\n\n        newOrders.forEach(ord => {\n            const lastIndex = tableBody.children.length;\n\n            const orderHtml = `<tr id=\"order--${ord[0]}\"><td>${lastIndex + 1}</td><td>${ord[1]}</td><td>${ord[0]}</td><td>${ord[2]}</td>\n            <td>${ord[3]} (${ord[4]})</td><td>${ord[5]}</td><td>${ord[6]}</td><td><button class=\"order__remove__btn btn\">Remove</button></td></tr>`;\n            tableBody.insertAdjacentHTML('beforeend',orderHtml);\n        });\n    })\n    .catch(console.error);\n});\n\n\n\n\n\n\n\n//functionality to delete order from ui and database\ntableBody.addEventListener('click', function(e) {\n    const orderRemoveBtn = e.target.classList.contains('order__remove__btn');\n\n    if(orderRemoveBtn) {\n        //1. Get order id\n        const order_id = e.target.parentNode.parentNode.id.split('--')[1];\n\n        \n        //2. http request to remove the order from database\n        const http = async () => {\n            const init = {\n                mode : 'same-origin',\n                method : 'post',\n                body : JSON.stringify({id : +order_id}),\n                headers : {\n                    'Content-Type' : 'application/json'\n                },\n                cache : 'default'\n            };\n            const response = await fetch('/removeOrder',init);\n\n            if(response.status === 200) return response.text();\n            else throw Error('Did not get the expected result');\n        };\n\n        http()\n        .then (res => console.log(res))\n        .catch(console.error);\n\n\n        //3. Remove the order from UI\n        this.removeChild(e.target.parentNode.parentNode);\n\n\n        //4. Update order indexes in UI\n        const allOrders = this.children;     \n        for(let index = 0;index < allOrders.length;index++) {\n            allOrders[index].children[0].textContent = index + 1;\n        }\n    }\n});"]}